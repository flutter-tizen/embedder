#!/usr/bin/env python3
# Copyright 2022 Samsung Electronics Co., Ltd. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import argparse
import os
import re
import subprocess
import sys
from pathlib import Path


def get_out_dir(args):
  target_dir = ['tizen', args.target_cpu]

  if args.unoptimized:
    target_dir.append('unopt')

  if args.target_dir:
    target_dir = [args.target_dir]

  return os.path.join('out', '_'.join(target_dir))


def get_sysroot_path(sysroot, target_cpu):
  if not sysroot:
    sysroot = os.path.join(__file__, '..', '..', 'sysroot', target_cpu)

  abspath = os.path.abspath(sysroot)
  if not os.path.isdir(abspath):
    sys.exit('{} is not a valid directory.'.format(abspath))

  return abspath


def get_target_triple(target_cpu):
  if target_cpu == 'arm':
    return 'arm-linux-gnueabi'
  elif target_cpu == 'arm64':
    return 'aarch64-linux-gnu'
  elif target_cpu == 'x86':
    return 'i686-linux-gnu'
  else:
    sys.exit('Unknown target CPU.')


def get_clang_version(toolchain):
  clang_path = os.path.join(toolchain, 'bin', 'clang')
  if not os.access(clang_path, os.X_OK):
    sys.exit('{} is not a valid executable.'.format(clang_path))

  # "Ubuntu clang version 11.0.0-2~ubuntu20.04.1"
  output = subprocess.run(
    [clang_path, '--version'], encoding='utf-8', stdout=subprocess.PIPE).stdout
  match = re.search('(\d+)\.\d+\.\d+', output)
  if match:
    return int(match.group(1))
  else:
    sys.exit('Unknown clang version.')


def to_gn_args(args):
  gn_args = {}

  gn_args['is_unopt'] = args.unoptimized

  gn_args['target_os'] = 'linux'
  gn_args['target_cpu'] = args.target_cpu

  gn_args['toolchain_path'] = args.target_toolchain
  gn_args['sysroot_path'] = get_sysroot_path(
    args.target_sysroot, args.target_cpu)
  gn_args['target_triple'] = get_target_triple(args.target_cpu)
  gn_args['clang_version'] = get_clang_version(args.target_toolchain)

  gn_args['use_system_cxx'] = args.system_cxx

  for key, val in gn_args.items():
    if isinstance(val, bool):
      gn_args[key] = 'true' if val else 'false'
    elif isinstance(val, str):
      gn_args[key] = '"{}"'.format(val)
    else:
      gn_args[key] = val

  return gn_args


def parse_args(args):
  args = args[1:]
  parser = argparse.ArgumentParser(description='A script to run "gn gen".')

  parser.add_argument('--unoptimized', default=False, action='store_true')

  parser.add_argument('--target-cpu', type=str, required=True,
                      choices=['arm', 'x86', 'arm64'])

  parser.add_argument('--target-toolchain', type=str, required=True)
  parser.add_argument('--target-sysroot', type=str)

  parser.add_argument('--system-cxx', default=False, action='store_true')

  parser.add_argument('--target-dir', default=None, type=str)
  parser.add_argument('--verbose', default=False, action='store_true')

  return parser.parse_args(args)


def main():
  args = parse_args(sys.argv)

  root_dir = Path(__file__).parent.parent
  gn = root_dir / 'third_party' / 'gn' / 'gn'
  command = [gn, 'gen', '--check', '--export-compile-commands']

  gn_args = ['%s=%s' % keyval for keyval in to_gn_args(args).items()]
  out_dir = get_out_dir(args)
  command.append(out_dir)
  command.append('--args=' + ' '.join(gn_args))

  if args.verbose:
    command.append('-v')

  print('Generating GN files in: ' + out_dir)
  try:
    subprocess.run(command, cwd=root_dir, check=True)
  except subprocess.CalledProcessError:
    sys.exit('Failed to generate GN files.')


# Execute only if run as a script.
if __name__ == "__main__":
  main()
